# Starter pipeline


# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml


trigger:
- feat_serviceImplementation
- Master
pool:
  vmImage: 'ubuntu-latest'

variables:
  GOBIN:  '$(GOPATH)/bin' # Go binaries path
  GOROOT: '/usr/local/go1.11' # Go installation path
  #GOPATH: '$(system.defaultWorkingDirectory)/gopath' # Go workspace path
  #so VM/goPath/HERE IS your workspace
  GOPATH: '$(system.defaultWorkingDirectory)/gopath'
  modulePath: '$(GOPATH)/src/JokeApp'
  #modulePath: '$(GOPATH)/src/github.com/$(build.repository.name)'
  #modulePath: '$(GOPATH)/src/github.com/$(build.repository.name)' # Path to the module's code
  imageName: 'React-GoLang-Img'
  DOCKER_BUILDKIT: 1
    
steps:


- script: |
    mkdir -p '$(GOBIN)'
    mkdir -p '$(GOPATH)/pkg'
    mkdir -p '$(modulePath)'
    shopt -s extglob
    mv !(gopath) '$(modulePath)'
    echo '##vso[task.prependpath]$(GOBIN)'
    echo '##vso[task.prependpath]$(GOROOT)/bin'
  displayName: 'Set up the Go workspace'



- script: |
    if [ -f Gopkg.toml ]; then
        curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
        dep ensure
    fi
  workingDirectory: '$(modulePath)'
  displayName: 'Download dep and run `dep ensure`'


- script : |
    mkdir testing1
    dir $(modulePath)
  displayName : "test"

- script: go build -v .
  displayName: 'Build Golang Source'
  #workingDirectory: '$(GOPATH)/src'
  workingDirectory: '$(modulePath)'



- script : |
    mkdir testing1
    dir $(modulePath)
  displayName : "test 2"


#- task: PowerShell@2
#  inputs:
#    targetType: 'inline'
#    script: |
#      # Write your PowerShell commands here.
#      #some text
#      Write-Host "Hello World"
#      git checkout $(Build.SourceBranchName)
#      git remote add heroku https://heroku:$(pat)@git.heroku.com/redklouds-jokeapp.git
#      git push heroku $(Build.SourceBranchName)


- task: Docker@2
  displayName: Build and push image to container registry
  inputs:
    repository: $(imageName)
    command: buildAndPush
    containerRegistry: AzureContainerRegistry
    Dockerfile: $(modulePath)/Dockerfile
    tags: |
      $(Build.BuildId)
      latest



- script: |
    echo Add other tasks to build, test, and deploy your project.
    echo See https://aka.ms/yaml
  displayName: 'Run a multi-line script'
